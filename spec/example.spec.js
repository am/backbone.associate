// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  _ = require('underscore');

  require('./helper');

  require('../src/backbone.associate');

  describe('Example uses', function() {
    var Cities, City, Country, Flag;
    Country = (function(_super) {

      __extends(Country, _super);

      function Country() {
        return Country.__super__.constructor.apply(this, arguments);
      }

      Country.prototype.idAttribute = 'name';

      Country.prototype.url = function() {
        return '/countries/' + this.id;
      };

      return Country;

    })(Backbone.Model);
    Flag = (function(_super) {

      __extends(Flag, _super);

      function Flag() {
        return Flag.__super__.constructor.apply(this, arguments);
      }

      return Flag;

    })(Backbone.Model);
    City = (function(_super) {

      __extends(City, _super);

      function City() {
        return City.__super__.constructor.apply(this, arguments);
      }

      City.prototype.idAttribute = 'name';

      return City;

    })(Backbone.Model);
    Cities = (function(_super) {

      __extends(Cities, _super);

      function Cities() {
        return Cities.__super__.constructor.apply(this, arguments);
      }

      Cities.prototype.model = City;

      return Cities;

    })(Backbone.Collection);
    Backbone.associate(Country, {
      flag: {
        type: Flag
      },
      cities: {
        type: Cities
      }
    });
    describe('Setting associate parameters', function() {
      beforeEach(function() {
        return Country.prototype.set = function(attributes) {
          var result,
            _this = this;
          result = {};
          _.each(attributes, function(value, key) {
            var attribute;
            attribute = _this.attributes[key];
            if (attribute instanceof Backbone.Collection) {
              return attribute.reset(value);
            } else if (attribute instanceof Backbone.Model) {
              return attribute.set(value);
            } else {
              return result[key] = value;
            }
          });
          return Country.__super__.set.call(this, result);
        };
      });
      afterEach(function() {
        return Country.prototype.set = Backbone.Model.prototype.set;
      });
      describe('Setting associated models', function() {
        beforeEach(function() {
          this.canada = new Country(Fixtures.testCountry, {
            parse: true
          });
          return this.expected = {
            colors: ['green', 'blue']
          };
        });
        it('should update model attributes', function() {
          this.canada.set({
            flag: this.expected
          });
          return expect(this.canada.flag().attributes).toEqual(this.expected);
        });
        return it('should not change references', function() {
          var flag;
          flag = this.canada.flag();
          this.canada.set({
            flag: this.expected
          });
          expect(this.canada.flag() instanceof Flag).toBeTruthy();
          return expect(this.canada.flag() === flag).toBeTruthy();
        });
      });
      return describe('Setting associated collections', function() {
        beforeEach(function() {
          this.canada = new Country(Fixtures.testCountry, {
            parse: true
          });
          return this.expected = [
            {
              name: 'Saskatoon'
            }, {
              name: 'Windsor'
            }
          ];
        });
        it('should reset associated collections', function() {
          var _this = this;
          this.canada.set({
            cities: this.expected
          });
          expect(this.canada.cities().length).toEqual(this.expected.length);
          return _.each(this.expected, function(city) {
            return expect(_this.canada.cities().get(city.name)).toBeTruthy();
          });
        });
        return it('should not change references', function() {
          var cities;
          cities = this.canada.cities();
          this.canada.set({
            cities: this.expected
          });
          expect(this.canada.cities() instanceof Cities).toBeTruthy();
          return expect(this.canada.cities() === cities).toBeTruthy();
        });
      });
    });
    describe('Assigning Associate URLs', function() {
      beforeEach(function() {
        return this.canada = new Country(Fixtures.testCountry, {
          parse: true
        });
      });
      return describe('Assigning URLs for associated collections', function() {
        return it('behaves as expected', function() {
          var city;
          this.expected = this.canada.url() + '/cities';
          city = this.canada.cities().first();
          this.canada.cities().url = this.expected;
          return expect(city.url()).toEqual(this.expected + '/' + city.id);
        });
      });
    });
    return describe('Listening to Associate Events', function() {
      beforeEach(function() {
        this.canada = new Country(Fixtures.testCountry, {
          parse: true
        });
        return this.callback = jasmine.createSpy();
      });
      return it('behaves as expected', function() {
        this.canada.listenTo(this.canada.cities(), 'add', this.callback);
        this.canada.cities().add({
          name: 'St. John\'s'
        });
        return expect(this.callback).toHaveBeenCalled();
      });
    });
  });

}).call(this);
