// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Fixtures, TestCollection, TestHelpers, TestModel, global, globals, module, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  _ = require('underscore');

  TestModel = (function(_super) {

    __extends(TestModel, _super);

    function TestModel() {
      return TestModel.__super__.constructor.apply(this, arguments);
    }

    TestModel.prototype.defaults = {
      age: '',
      sex: '',
      name: ''
    };

    TestModel.prototype.validate = function() {
      if ((this.attributes.valid != null) && !this.attributes.valid) {
        return 'Invalid';
      }
    };

    return TestModel;

  })(Backbone.Model);

  TestCollection = (function(_super) {

    __extends(TestCollection, _super);

    function TestCollection() {
      return TestCollection.__super__.constructor.apply(this, arguments);
    }

    TestCollection.prototype.model = TestModel;

    return TestCollection;

  })(Backbone.Collection);

  Fixtures = {
    testModels: [
      {
        age: 35,
        sex: 'M',
        name: 'John'
      }, {
        age: 26,
        sex: 'F',
        name: 'Joan'
      }, {
        age: 24,
        sex: 'F',
        name: 'Jean'
      }, {
        age: 33,
        sex: 'M',
        name: 'Joe'
      }, {
        age: 26,
        sex: 'M',
        name: 'Jordan'
      }
    ],
    testCountry: {
      name: 'Canada',
      cities: [
        {
          name: 'Calgary'
        }, {
          name: 'Regina'
        }
      ]
    }
  };

  TestHelpers = {
    getRandomAttr: function(fixture, key) {
      var results;
      results = _.pluck(fixture, key);
      return results[_.random(0, results.length - 1)];
    },
    getExpectedResult: function(fixture, key, value) {
      var whereVal;
      whereVal = {};
      whereVal[key] = value;
      return _.where(fixture, whereVal);
    }
  };

  globals = {
    TestModel: TestModel,
    TestCollection: TestCollection,
    Fixtures: Fixtures,
    TestHelpers: TestHelpers
  };

  for (global in globals) {
    module = globals[global];
    root[global] = module;
  }

}).call(this);
